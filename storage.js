const StorageAPI=(()=>{const DB='bag-scan-db',STORE='batches';let _db;function open(){return new Promise((res,rej)=>{const r=indexedDB.open(DB,1);r.onupgradeneeded=e=>{const db=e.target.result;if(!db.objectStoreNames.contains(STORE)){db.createObjectStore(STORE,{keyPath:'id'})}};r.onsuccess=()=>{_db=r.result;res()};r.onerror=()=>rej(r.error)})}async function addBatch(b){if(!_db)await open();return new Promise((res,rej)=>{const tx=_db.transaction(STORE,'readwrite');tx.objectStore(STORE).add(b);tx.oncomplete=()=>res();tx.onerror=()=>rej(tx.error)})}async function updateBatch(b){if(!_db)await open();return new Promise((res,rej)=>{const tx=_db.transaction(STORE,'readwrite');tx.objectStore(STORE).put(b);tx.oncomplete=()=>res();tx.onerror=()=>rej(tx.error)})}async function getAllBatches(){if(!_db)await open();return new Promise((res,rej)=>{const tx=_db.transaction(STORE,'readonly');const r=tx.objectStore(STORE).getAll();r.onsuccess=()=>res(r.result.sort((a,b)=>b.created-a.created));r.onerror=()=>rej(r.error)})}async function exportCSV(){const all=await getAllBatches();const rows=[['id','created','vuelo','origen','destino','supervisor','modo','carro','cartIndex','sessionId','codes']];all.forEach(b=>{const m=b.meta||{};rows.push([b.id,new Date(b.created).toISOString(),m.vuelo,m.origen,m.destino,m.supervisor||m.responsable,b.mode,m.carro,m.cartIndex,m.sessionId,(b.items||[]).map(i=>i.code).join('|')])});return Utils.toCSV(rows)}async function exportJSON(){const all=await getAllBatches();return JSON.stringify(all,null,2)}return{addBatch,getAllBatches,updateBatch,exportCSV,exportJSON}})();